@using BlazorServerAppointmentApp.Model
<EditForm Model="@Doctor" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-6 mx-auto">
            <div class="form-group">
                <label>First Name :</label>
                <div>
                    <InputText @bind-Value="@Doctor.FirstName" />
                    <ValidationMessage For="@(() => Doctor.FirstName)" />
                </div>
            </div>
            <div class="form-group">
                <label>Last Name :</label>
                <div>
                    <InputText @bind-Value="@Doctor.LastName" />
                    <ValidationMessage For="@(() => Doctor.LastName)" />
                </div>
            </div>
        </div>
        <div class="col-md-6 mx-auto">
            <table>
                @foreach (var medicalProcedure in MedicalProcedures)
                {
                    <tr>
                        <td>@medicalProcedure.Name</td>
                        <td>
                            <RadzenCheckBox 
                                             Value="@Checked(medicalProcedure.Id)"
                                             Style="margin-left: 20px" TValue="bool" 
                                             Change="@(args => Change(args, medicalProcedure.Id))" />
                        </td>
                    </tr>
                }
            </table>

        </div>
    </div>


    <button type="submit" class="btn btn-success">
        @ButtonText
    </button>

</EditForm>


@code {

    public bool Checked(long medicalProcedureId)
    {
       return Doctor.DoctorMedicalProcedures
           .Any(x => x.MedicalProcedureId == medicalProcedureId);
    }
    
    void Change(bool? value, long medicalProcedureId)
    {
        if (value.HasValue && value.Value)
        {
            if (Doctor.DoctorMedicalProcedures.All(x => x.MedicalProcedureId != medicalProcedureId))
            {
                Doctor.DoctorMedicalProcedures.Add(new DoctorMedicalProcedureViewModel()
                {
                    MedicalProcedureId = medicalProcedureId,
                    DoctorId = Doctor.Id
                });
            }
        }
        else
        {
            Doctor.DoctorMedicalProcedures.Remove(Doctor.DoctorMedicalProcedures
                .FirstOrDefault(x => x.MedicalProcedureId == medicalProcedureId));
        }
        StateHasChanged();
    }    
    
    [Parameter] public DoctorViewModel Doctor  { get; set; }
    [Parameter] public List<MedicalProcedureViewModel> MedicalProcedures  { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}