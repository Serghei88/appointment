@attribute [Authorize]
@page "/appointments"
@using global::Appointment.Web.Model
@using global::Appointment.Shared.Model
@using Microsoft.AspNetCore.Identity
@using global::Appointment.Web.Data.Interfaces
@using Appointment.Web.Model.ViewModels
@inject HttpClient http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IAppointmentService AppointmentService
<h3>Appointments</h3>

<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@Appointments" TItem="AppointmentViewModel" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="AppointmentViewModel" Property="Id" Title="Doctor ID" />
            @if (Administrator)
            {
                <RadzenGridColumn TItem="AppointmentViewModel" Property="User" Title="Id">
                    <Template Context="data">
                        @data.User.Id
                    </Template>
                </RadzenGridColumn>
            }
            <RadzenGridColumn TItem="AppointmentViewModel" Property="MedicalProcedure" Title="Procedure">
                <Template Context="data">
                    @data.MedicalProcedure.Name
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="AppointmentViewModel" Property="Time" Title="Time" />
        </Columns>
    </RadzenGrid>
@code {
    
    List<AppointmentViewModel> Appointments { get; set; } = new List<AppointmentViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        if (!authState.User.IsInRole("Administrator"))
        {
            var user = await UserManager.GetUserAsync(authState.User);

            Appointments = await AppointmentService.GetUserAppointments(user.Id);
        }
        else
        {
            Administrator = true;
            Appointments = await AppointmentService.GetAppointments();
        }
    }

    private bool Administrator = false;
    
    [CascadingParameter]
    StateProvider StateProvider { get; set; }

    protected override void OnInitialized() => StateProvider.OnChange += StateHasChanged;
    public void Dispose() => StateProvider.OnChange -= StateHasChanged;
}